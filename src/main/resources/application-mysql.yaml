# MySQL does not support Sequences. Therefore Auto Increment is used to generate Primary Keys
# There is no straight forward way to use MySQL for Development and Oracle for Production
# https://vladmihalcea.com/how-to-replace-the-table-identifier-generator-with-either-sequence-or-identity-in-a-portable-way/
# GitHub: https://github.com/vladmihalcea/high-performance-java-persistence
# Video: https://vladmihalcea.com/high-performance-java-persistence-github-repository/
# It is better to use H2 for Development if you want to use Sequences
# If you want to use MySQL change @GeneratedValue line to @GeneratedValue( strategy = GenerationType.IDENTITY) and remove the @SequenceGenerator line
# Do not use AUTO as it may become problematic
# Here is another good example
# https://thoughts-on-java.org/hibernate-tips-override-primary-key-generation-strategy/
spring:
  jpa:
    # Show SQL
    # https://www.baeldung.com/sql-logging-spring-boot
    show-sql: true
    # You do not need to do a lot to override Annotations with orm.xml file. Just add your mapping-resources here
    # Hibernate by default reads the orm.xml file from META-INF directory. If you have the file in the correct place it will be used
    # To activate the file based on the Spring Profile use mapping-resources. For this to work do not keep orm.xml in META-INF.
    mapping-resources:
      - db/orm/mysql-orm.xml
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL5Dialect
        ddl-auto: validate # This is none by default and we do not need to use this because we are using Liquibase for Database Initialization.https://docs.spring.io/spring-boot/docs/current/reference/html/howto-database-initialization.html
        # Beutify SQL
        # https://www.baeldung.com/sql-logging-spring-boot
        format_sql: true

  datasource:
    url: jdbc:mysql://localhost:3306/database
    username: root
    password: root